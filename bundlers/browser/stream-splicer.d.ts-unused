import ReadableStream = require("readable-stream");

declare module 'stream-splicer' {
    interface Pipeline extends ReadableStream.Duplex {
        _options: ReadableStream.DuplexOptions;
        _wrapOptions: { objectMode: boolean };
        _streams: NodeJS.ReadWriteStream[];
        length: number;

        new (opts?: ReadableStream.DuplexOptions): Pipeline;
        new (streams: NodeJS.ReadWriteStream[], opts?: ReadableStream.DuplexOptions): Pipeline;

        _read(): void;

        _write(chunk: any, encoding: string, callback: (error?: Error | null) => void): void;

        _notEmpty(): void;

        push(...streams: NodeJS.ReadWriteStream[]): number;

        pop(): NodeJS.ReadWriteStream;

        shift(): NodeJS.ReadWriteStream;

        unshift(): number;
        unshift(chunk: any): boolean;

        splice(start: number, removeLen?: number, ...streams: NodeJS.ReadWriteStream[]): NodeJS.ReadWriteStream[];

        get(...indexes: number[]): NodeJS.ReadWriteStream | undefined;

        indexOf(stream: NodeJS.ReadWriteStream): number;

        _wrapStream<T extends NodeJS.WritableStream>(stream: T): ReadableStream.Readable & T;
    }
    module Pipeline {
        function obj(opts ?: ReadableStream.DuplexOptions): Pipeline;
        function obj(streams: NodeJS.ReadWriteStream[], opts?: ReadableStream.DuplexOptions): Pipeline;
    }

    export = Pipeline;
}